name: Deploy Node.js to Digital Ocean

env:
  REMOTE_DIR: '/var/www/quote'
  SCRIPT: 'app.js'
  NAME: 'quote'

on:
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
  pull_request:
    branches: [ main ]
    paths-ignore:
      - ".github/**"
      - '.gitignore'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: PROD  # Specify the environment name here
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Debug information
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build --if-present
      
    - name: Create deployment package
      run: |
        mkdir staging
        rsync -av --exclude='.git' --exclude='.github' --exclude='node_modules' ./ staging/
        tar -czf deploy.tar.gz -C staging .
        rm -rf staging
    
    - name: Deploy to server
      env:
        SSH_PASSWORD: ${{ secrets.SERVER_SSH_PASSWORD }}
        HOST: ${{ secrets.SERVER_HOST }}
        REMOTE_DIR: /var/www/quote
        SCRIPT: app.js
        NAME: quote
      run: |
        echo "Debugging information:"
        echo "HOST: $HOST"
        echo "REMOTE_DIR: $REMOTE_DIR"
        echo "SCRIPT: $SCRIPT"
        echo "NAME: $NAME"
        if [ -z "$HOST" ]; then
          echo "Error: HOST is empty. Please check your SERVER_HOST secret."
          exit 1
        fi
        if [ -z "$SSH_PASSWORD" ]; then
          echo "Error: SSH_PASSWORD is empty. Please check your SERVER_SSH_PASSWORD secret."
          exit 1
        fi
        sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SERVER_USERNAME }}@$HOST:/tmp/
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@$HOST << EOF
          rm -rf $REMOTE_DIR
          mkdir -p $REMOTE_DIR
          tar -xzf /tmp/deploy.tar.gz -C $REMOTE_DIR
          rm /tmp/deploy.tar.gz
          cd $REMOTE_DIR
          npm install --production
    
          # Check if centralized ecosystem file exists, if not create it
          ECOSYSTEM_FILE="/var/www/ecosystem.config.js"
          if [ ! -f "$ECOSYSTEM_FILE" ]; then
            echo "Creating centralized ecosystem file..."
            echo "module.exports = { apps: [] };" > "$ECOSYSTEM_FILE"
          fi
    
          # Update or add the current app to the ecosystem file
          node -e "
            const fs = require('fs');
            const ecosystem = require('$ECOSYSTEM_FILE');
            const appIndex = ecosystem.apps.findIndex(app => app.name === '$NAME');
            const appConfig = {
              name: '$NAME',
              script: '$REMOTE_DIR/$SCRIPT',
              instances: 1,
              autorestart: true,
              watch: true,
              max_memory_restart: '1G'
            };
            if (appIndex === -1) {
              ecosystem.apps.push(appConfig);
            } else {
              ecosystem.apps[appIndex] = appConfig;
            }
            fs.writeFileSync('$ECOSYSTEM_FILE', 'module.exports = ' + JSON.stringify(ecosystem, null, 2));
          "
    
          # Check if PM2 startup is configured
          if ! pm2 startup | grep -q "already configured"; then
            echo "PM2 startup not configured. Configuring now..."
            pm2 startup
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $USER --hp /home/$USER
          fi
    
          # Reload the updated app
          pm2 reload "$ECOSYSTEM_FILE" --only $NAME
    
          pm2 save
          sudo systemctl restart nginx
        EOF
        
    
